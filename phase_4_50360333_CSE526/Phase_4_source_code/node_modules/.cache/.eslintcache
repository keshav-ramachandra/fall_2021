[{"/home/kesha/Desktop/phase_4_50360333_CSE526/Phase_4_source_code/src/index.js":"1","/home/kesha/Desktop/phase_4_50360333_CSE526/Phase_4_source_code/src/App.js":"2","/home/kesha/Desktop/phase_4_50360333_CSE526/Phase_4_source_code/src/serviceWorker.js":"3","/home/kesha/Desktop/phase_4_50360333_CSE526/Phase_4_source_code/src/app/store.js":"4","/home/kesha/Desktop/phase_4_50360333_CSE526/Phase_4_source_code/src/features/OrgUpdater/OrgSlice.js":"5","/home/kesha/Desktop/phase_4_50360333_CSE526/Phase_4_source_code/src/features/OrgUpdater/Org.js":"6","/home/kesha/Desktop/phase_4_50360333_CSE526/Phase_4_source_code/src/features/web3.js":"7","/home/kesha/Desktop/phase_4_50360333_CSE526/Phase_4_source_code/src/features/controller.js":"8"},{"size":1295,"mtime":1638725450000,"results":"9","hashOfConfig":"10"},{"size":237,"mtime":1638725423000,"results":"11","hashOfConfig":"10"},{"size":5014,"mtime":1631728493000,"results":"12","hashOfConfig":"10"},{"size":191,"mtime":1638725885000,"results":"13","hashOfConfig":"10"},{"size":10867,"mtime":1638754722000,"results":"14","hashOfConfig":"10"},{"size":10766,"mtime":1638760264000,"results":"15","hashOfConfig":"10"},{"size":578,"mtime":1631728493000,"results":"16","hashOfConfig":"10"},{"size":14234,"mtime":1638748273000,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"mlzjqb",{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/kesha/Desktop/phase_4_50360333_CSE526/Phase_4_source_code/src/index.js",[],"/home/kesha/Desktop/phase_4_50360333_CSE526/Phase_4_source_code/src/App.js",["37"],"import React from 'react';\nimport logo from './logo.svg';\nimport { Org } from './features/OrgUpdater/Org';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Org />\n    </div>\n  );\n}\n\nexport default App;\n","/home/kesha/Desktop/phase_4_50360333_CSE526/Phase_4_source_code/src/serviceWorker.js",[],"/home/kesha/Desktop/phase_4_50360333_CSE526/Phase_4_source_code/src/app/store.js",[],"/home/kesha/Desktop/phase_4_50360333_CSE526/Phase_4_source_code/src/features/OrgUpdater/OrgSlice.js",["38","39","40","41","42","43","44"],"import { createSlice, nanoid, createAsyncThunk } from '@reduxjs/toolkit'\n//import controller from '../controller'\nimport web3 from './../web3'\nimport {controller, tcontroller} from '../controller'\nimport {store} from '../../app/store'\n\n\n\n\n\nexport const getCurrentOrg = createAsyncThunk('Org/getCurrentOrg', async () => {\n  const acts = await web3.eth.getAccounts(); \n  return { currentOrg: acts[0]};\n})\n\nexport const updateStats = createAsyncThunk('Org/updateStats', async (data) => {\n\n     let act = await web3.eth.getAccounts();\n\n     let balance = await tcontroller.methods.balanceOf(act[0]).call();\n\n     \n     //let own = await store.getState().owner\n     //console.log(\"ownnene\", own)\n     let naccess = await controller.methods.doesUserHasNormalAccess(localStorage.getItem(\"owner\")).call({from:act[0]})\n     \n     let paccess = await controller.methods.doesUserHasPremiumAccess(localStorage.getItem(\"owner\")).call({from:act[0]})\n\n     if(naccess == true){\n       naccess='Yes'\n     }\n     else{\n      naccess='No'\n     }\n\n     if(paccess == true){\n       paccess='Yes'\n     }\n     else{\n      paccess='No'\n     }\n     return { currentOrg: act[0],balance : balance , paccess: paccess, naccess: naccess}\n\n\n})\n\n\nexport const registerAsOrganization = createAsyncThunk('Org/registerAsOrganizaton', async (data) => {\n     \n     let act = await web3.eth.getAccounts();\n\n     await controller.methods.registerAsOrganization(data.name,parseInt(data.normalSubFee), parseInt(data.premiumSubFee)).send({from:act[0]});\n     \n\n     return {premiumSubFee: data.premiumSubFee, normalSubFee: data.normalSubFee, name: data.name, owner : act[0]}\n})\n\n\nexport const purchaseTokens = createAsyncThunk('Org/purchaseTokens', async (data) => {\n     let act = await web3.eth.getAccounts();\n     await controller.methods.purchaseTokens().send({from:act[0], value: data.value});\n     let balance = await tcontroller.methods.balanceOf(act[0]).call();\n     console.log(balance);\n     return {balance:balance}\n})\n\nexport const getTokenBalance = createAsyncThunk('Org/getTokenBalance', async () => {\n     let act = await web3.eth.getAccounts();\n     console.log(\"methods\", tcontroller.methods)\n     let balance = await tcontroller.methods.balanceOf(act[0]).call();\n\n     console.log(\"l balance is \", balance)\n     return { balance : balance }\n})\n\nexport const purchaseNormalSubscription = createAsyncThunk('Org/purchaseNormalSubscription', async (data) => {\n        let act = await web3.eth.getAccounts();\n        await controller.methods.buyNormalSubsciption(data.owner).send({from:act[0] });\n        let naccess = await controller.methods.doesUserHasNormalAccess(data.owner).call({from:act[0]})\n        let balance = await tcontroller.methods.balanceOf(act[0]).call();\n         if(naccess == true){\n             naccess='Yes'\n         }\n         else{\n             naccess='No'\n         }\n        return { naccess : naccess, balance: balance }\n})\n\n\nexport const purchasePremiumSubscription = createAsyncThunk('Org/purchasePremiumSubscription', async (data) => {\n        let act = await web3.eth.getAccounts();\n        await controller.methods.buyPremiumSubscription(data.owner).send({from:act[0] });\n        let paccess = await controller.methods.doesUserHasPremiumAccess(data.owner).call({from:act[0]})\n        let balance = await tcontroller.methods.balanceOf(act[0]).call();\n        if(paccess == true){\n            paccess='Yes'\n        }\n        else{\n            paccess='No'\n        }\n        return { paccess : paccess, balance: balance }        \n})\n\n\n\n\n\n/*\nexport const loadSelectElements = createAsyncThunk('node/loadSelectElements', async () => {\n  const response = await controller.methods.nodeCount().call();\n  const options = [];\n  for(var i=0;i < response;i++){\n      options.push({ value: i, label: i })\n  }\n  return options;\n})\n\nexport const getBalanceAsync = createAsyncThunk('node/getBalanceAsync', async (_nodeId) => {\n  const response = await controller.methods.getCumulativeNodeDeposit(_nodeId).call();\n  return response;\n})\n\nexport const updateCurrentNodeAsync = createAsyncThunk('node/updateCurrentNodeAsync', async (_nodeId) => {\n  return parseInt(_nodeId);\n})\n\n\nexport const stakeRenAsync = createAsyncThunk('node/stakeRenAsync', async (data) => {\n  //const {_amount,_nodeId,_sender}= data;\n  await controller.methods.stakeRen(parseInt(data.incrementAmount),parseInt(data.currentNode)).send({from:data.user});\n\n  \n  const nodeBalance = await controller.methods.getCumulativeNodeDeposit(data.currentNode).call();\n  let status\n  if(parseInt(nodeBalance) == 50000){\n    status = 'full';\n  }\n  else{\n    status = 'accepting';\n  }\n\n  \n\n  const share = await controller.methods.getMyCumulativeNodeDeposit(parseInt(data.currentNode)).call({from:data.user});\n\n  return {nodeId: data.currentNode, nodeBalance: nodeBalance, status: status, share:share}\n})\n\n\nexport const createNodeAsync = createAsyncThunk('node/createNodeAsync', async (_user) => {\n  const response = await controller.methods.createNode().send({from:_user});\n  return response;\n})\n\nexport const getNodeAsync = createAsyncThunk('node/getNodeAsync', async () => {\n  const response = await controller.methods.nodeCount().call();\n  return parseInt(response)-1;\n})\n\nexport const getDepositStatusAsync = createAsyncThunk('node/getDepositStatusAsync',async() => {\n  const currentNodeBalance = getBalanceAsync(getNodeAsync());\n  if(parseInt(currentNodeBalance) == 50000){\n    return 'full';\n  }\n  else{\n    return 'accepting';\n  }\n})\n\nexport const updateNodeStats = createAsyncThunk('node/updateNodeStats', async (data) => {\n  const response = await controller.methods.nodeCount().call();\n  \n  let nodeId \n  if(data._nodeId == -1){\n    nodeId= parseInt(response) - 1;\n  }\n  else{\n    nodeId = parseInt(data._nodeId)\n  }\n  const nodeBalance = await controller.methods.getCumulativeNodeDeposit(nodeId).call();\n  let status\n  if(parseInt(nodeBalance) == 50000){\n    status = 'full';\n  }\n  else{\n    status = 'accepting';\n  }\n\n  const acts = await web3.eth.getAccounts();\n  console.log(\"user is\", acts[0])\n\n\n  const share = await controller.methods.getMyCumulativeNodeDeposit(nodeId).call({from:acts[0]});\n\n  return {nodeId: nodeId, nodeBalance: nodeBalance, status: status,share:share}\n})\n\n\n\nexport const isOwner = createAsyncThunk('node/isOwner', async (_user) => {\n  const response = await controller.methods.owner().call();\n  const acts = await web3.eth.getAccounts(); \n\n  if(response == acts[0]){\n    return 'yes';\n  }\n  else{\n    return 'no';\n  }\n  \n})\n\n*/\n\n\nlet initialState= {\n      currentOrg: '',\n      orgCreated: false,\n      normalSubFee:0,\n      premiumSubFee:0,\n      normalSubTime:120,\n      premiumSubTime:300,\n      userTokenBalance:0,\n      doesUserHasNormalAccess: 'No',\n      doesUserHasPremiumAccess: 'No',\n      orgName: '',\n      orgOwner:'',\n      isOwner:false\n    }\nconst OrgSlice = createSlice({\n    name:'org',\n    initialState,\n    \n    reducers: {\n      // omit existing reducers here\n    },\n    extraReducers: (builder) => {\n      // Add reducers for additional action types here, and handle loading state as needed\n      builder.addCase(getCurrentOrg.fulfilled, (state, action) => {\n        // Add user to the state array\n        state.currentOrg = action.payload.currentOrg\n      })\n      .addCase(registerAsOrganization.fulfilled, (state, action) => {\n        // Add user to the state array\n        state.orgName = action.payload.name\n        state.normalSubFee = action.payload.normalSubFee\n        state.premiumSubFee = action.payload.premiumSubFee\n        state.orgCreated = true\n        state.userTokenBalance = action.payload.balance\n        console.log(\"now owner is\", action.payload.owner)\n        state.orgOwner = action.payload.owner\n        localStorage.setItem(\"owner\", action.payload.owner)\n        state.isOwner = true\n        state.currentOrg = action.payload.owner\n      })\n      .addCase(getTokenBalance.fulfilled, (state, action) => {\n        // Add user to the state array\n        state.userTokenBalance = action.payload.balance\n      })\n      .addCase(purchaseTokens.fulfilled, (state, action) => {\n        // Add user to the state array\n        state.userTokenBalance = action.payload.balance\n      })\n      .addCase(updateStats.fulfilled, (state, action) => {\n        // Add user to the state array\n        state.userTokenBalance = action.payload.balance\n        state.currentOrg = action.payload.currentOrg\n        if(localStorage.getItem(\"owner\") != action.payload.currentOrg){\n          state.isOwner= false\n        }\n        else{\n          state.isOwner=true\n        }\n        state.doesUserHasNormalAccess = action.payload.naccess\n        console.log(\"user access\", action.payload.naccess)\n        state.doesUserHasPremiumAccess = action.payload.paccess\n        \n      })\n      .addCase(purchaseNormalSubscription.fulfilled, (state, action) => {\n        // Add user to the state array\n        state.userTokenBalance = action.payload.balance\n        state.doesUserHasNormalAccess = action.payload.naccess\n      })\n      .addCase(purchasePremiumSubscription.fulfilled, (state, action) => {\n        // Add user to the state array\n        state.userTokenBalance = action.payload.balance\n        state.doesUserHasPremiumAccess = action.payload.paccess\n      })\n\n      /*\n      .addCase(getBalanceAsync.fulfilled, (state, action) => {\n        // Add user to the state array\n        state.status = 'succeeded'\n        state.balance = action.payload\n      })\n      .addCase(getNodeAsync.fulfilled, (state, action) => {\n        // Add user to the state array\n        state.status = 'succeeded'\n        state.currentNode = action.payload\n      })\n      .addCase(getDepositStatusAsync.fulfilled, (state, action) => {\n        // Add user to the state array\n        state.status = 'succeeded'\n        state.depositStatus = action.payload\n      })\n      .addCase(updateNodeStats.fulfilled, (state, action) => {\n        // Add user to the state array\n        state.depositStatus = action.payload.status\n        state.balance = action.payload.nodeBalance\n        state.currentNode = action.payload.nodeId\n        state.share = action.payload.share\n        state.status ='func'\n      })\n      .addCase(isOwner.fulfilled, (state, action) => {\n        // Add user to the state array\n        state.owner = action.payload\n      })\n      .addCase(loadSelectElements.fulfilled, (state, action) => {\n        // Add user to the state array\n        state.options = action.payload\n      })\n      .addCase(stakeRenAsync.fulfilled, (state, action) => {\n        // Add user to the state array\n        state.depositStatus = action.payload.status\n        state.balance = action.payload.nodeBalance\n        state.currentNode = action.payload.nodeId\n        state.share = action.payload.share\n        state.status ='func'\n      })\n      */\n      \n    }\n})\n\n\n  export default OrgSlice.reducer","/home/kesha/Desktop/phase_4_50360333_CSE526/Phase_4_source_code/src/features/OrgUpdater/Org.js",["45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67"],"import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Box, Container, Row, Col } from 'react-bootstrap';\nimport web3 from './../web3'\n\nimport Select from 'react-select';\nimport {store} from '../../app/store'\n\n\n\nimport {\n  getCurrentOrg,\n  registerAsOrganization,\n  getTokenBalance,\n  purchaseTokens,\n  updateStats,\n  purchaseNormalSubscription,\n  purchasePremiumSubscription\n} from './OrgSlice';\nimport styles from './Org.module.css';\n\nexport function Org() {\n  //const fetchStatus = useSelector(state => state.node.status)\n  //const error = useSelector(state => state.node.error)\n  \n  \n\n\n\n\n\n  const dispatch = useDispatch();\n  //const user = useSelector(state => state.node.user);\n  const currentOrg = useSelector(state => state.org.currentOrg);\n  //const owner = useSelector(state => state.org.orgOwner);\n  const [oowner, setOowner] = useState(localStorage.getItem('owner'));\n  const isOwner = useSelector(state => state.org.isOwner);\n  //const balance = useSelector(state => state.node.balance);\n\n  //const [currentOrg, setCurrentOrg ] = useState('');\n\n  //const [owner, setOwner ] = useState('');\n\n  const userTokenBalance = useSelector(state => state.org.userTokenBalance); \n\n  const orgCreated = useSelector(state => state.org.orgCreated);\n  \n  const orgName = useSelector(state => state.org.orgName);\n\n  const normalSubFee = useSelector(state => state.org.normalSubFee)\n\n  const premiumSubFee = useSelector(state => state.org.premiumSubFee)\n\n  const normalSubTime = useSelector(state => state.org.normalSubTime)\n\n  const premiumSubTime = useSelector(state => state.org.premiumSubTime)\n\n  const doesUserHasNormalAccess = useSelector(state => state.org.doesUserHasNormalAccess)\n\n  const doesUserHasPremiumAccess = useSelector(state => state.org.doesUserHasPremiumAccess)\n\n  const [userBalance, setUserBalance ] = useState('');\n/*\n  const [normalSubFee, setNormalSubFee ] = useState(0);\n  const [premiumSubFee, setPremiumSubFee ] = useState(0);\n\n  const [normalSubTime, setNormalSubTime ] = useState(0);\n  const [premiumSubTime, setPremiumSubTime ] = useState(0);\n\n*/\n  const [ normalEndTime, setNormalEndTime ] = useState(0);\n  const [ premiumEndTime, setPremiumEndTime ] = useState(0);\n\n  //const [ doesUserHasNormalAccess, setDoesUserHasNormalAccess ] = useState(false);\n  //const [ doesUserHasPremiumAccess, setDoesUserHasPremiumAccess ] = useState(false);\n\n\n\n  const options = useSelector(state => state.org.options);\n  //dispatch(getUserAsync());\n  //const status = useSelector(state => state.node.status) \n  //const depositStatus = useSelector(state => state.node.depositStatus) \n  //const nodeBalance = useSelector(state => state.org.balance)\n  //const owner = useSelector(state => state.org.owner)\n  //const share = useSelector(state => state.org.share)\n\n  const [selectedOption, setSelectedOption] = useState(null);\n  const [premText, setPremText]= useState('Premium Authorization Needed')\n  const [normalText, setNormalText] = useState('Normal Authorization Needed')\n\n  /*\n  const handleChange = (selectedOption) => {\n    setSelectedOption(selectedOption);\n    console.log(selectedOption.value);\n    dispatch(updateOrgStats({_orgId:parseInt(selectedOption.value)}))\n     //this prints the selected option\n  }\n  */\n\n\n \n\n   useEffect(() => {\n     const interval = setInterval(() => {\n        dispatch(updateStats({owner: localStorage.getItem(\"owner\")}))\n      \n    }, 10000);\n    return () => clearInterval(interval)\n   }, []);\n\n\n   \n\n   useEffect(() => {\n\n    if(doesUserHasNormalAccess == 'No' ){\n       setNormalText('Normal Authorization needed')\n    }\n    else{\n      setNormalText('Usual Content Revealed')\n    }\n      \n   },[doesUserHasNormalAccess])\n\n   useEffect(() => {\n    if(doesUserHasPremiumAccess == 'No' ){\n       setPremText('Premium Authorization needed')\n    }\n    else{\n      setPremText('Premium Content Revealed')\n    }  \n   },[doesUserHasPremiumAccess])\n\n\n   useEffect(() => {\n\n      dispatch(getCurrentOrg())\n      dispatch(getTokenBalance())\n      //dispatch(updateNodeStats({_nodeId:-1}))\n      //dispatch(loadSelectElements())\n\n\n\n      async function listenMMAccount() {\n        window.ethereum.on(\"accountsChanged\", async function() {\n          // Time to reload your interface with accounts[0]!\n         const  accounts = await web3.eth.getAccounts();\n          dispatch(getCurrentOrg())\n          console.log(\"oooowner is \", localStorage.getItem(\"owner\"));\n          dispatch(updateStats({owner: localStorage.getItem(\"owner\")}))\n        });\n      }\n    listenMMAccount();\n  \n  }, [])\n\n\n\n  const [forgName, setfOrgName] = useState('')\n  const [fpremiumSubFee, setfPremiumSubFee] = useState(300)\n  const [fnormalSubFee, setfNormalSubFee] = useState(100)\n  const [purchaseAmount, setPurchaseAmount] = useState(0)\n  const handlefNameChange = (e) => {\n    setfOrgName(e.target.value);\n  }\n\n  const handleNSubFeeChange = (e) => {\n    setfNormalSubFee(parseInt(e.target.value))\n  }\n\n  const handlePSubFeeChange = (e) => {\n    setfPremiumSubFee(parseInt(e.target.value))\n  }\n\n  const handlePurchaseAmount = (e) => {\n    setPurchaseAmount(e.target.value)\n  }\n\n  \n  \n\n \n\n  let bContent \n\n  //if not owner\n  if(localStorage.getItem(\"owner\") != currentOrg){\n     bContent = <Container>\n       <Row className={styles.but_ui}><button onClick= { () => dispatch(purchaseNormalSubscription({ owner: localStorage.getItem(\"owner\") }))}>Buy Sub</button></Row>\n     </Container>\n  }\n  else{\n    bContent=''\n  }\n\n\n  let content \n\n\n\n  if(!orgCreated){\n    //content = <Row className={styles.but_ui}><button onClick= { () => dispatch(registerAsOrganization({ name:\"udemy\" , normalSubFee: 15 , premiumSubFee : 30, user:user}))}>Create Org</button></Row>\n    //content = <Row className={styles.but_ui}><button onClick= { () => dispatch(registerAsOrganization({ name:\"udemy\" , normalSubFee:15 , premiumSubFee:30, user:currentOrg}))}>Create Org</button></Row>\n    content = \n        <Container >\n        <br />\n        <br />\n        <br />\n        <br />\n\n      <Row style={{display: 'flex',  justifyContent:'center', paddingBottom: 30, paddingLeft:170}}><Col className={styles.attribute}>LRN Balance:</Col> <Col className={styles.attr_value} style={{ paddingRight:180 }}>{userTokenBalance}</Col></Row>\n      \n\n      <Row style={{display: 'flex',  justifyContent:'center'}}> <p> 1 LRN Token = 1 wei </p></Row>\n      <Row className={styles.but_ui} style={{display: 'flex', paddingBottom:50}}><Col><input type=\"text\" value={purchaseAmount} onChange={ handlePurchaseAmount}/></Col><Col><button onClick= { () => dispatch( purchaseTokens({value: purchaseAmount}) ) }>Purchase Tokens</button></Col></Row>\n\n\n        <h4> Register an Organization </h4>\n        \n        <Row style={{display: 'flex',  justifyContent:'center', padding: 10, paddingLeft:110}}>\n        <label>\n          Organization Name:\n          <input type=\"text\" value={forgName} onChange={ handlefNameChange} style={{ marginLeft:90}}/>\n        </label>\n        </Row>\n        <Row style={{display: 'flex',  justifyContent:'center', padding: 10, paddingLeft:90}}> \n        <label>\n          Normal Sub Fee:\n          <input type=\"text\" value={fnormalSubFee} onChange={ handleNSubFeeChange} style={{ marginLeft:110}} />\n        </label>\n        </Row>\n        <Row style={{display: 'flex',  justifyContent:'center', padding: 10, paddingLeft:90}}>\n        <label>\n          Premium Sub Fee:\n          <input type=\"text\" value={fpremiumSubFee} onChange={ handlePSubFeeChange} style={{ marginLeft:90}}/>\n        </label>\n        </Row>\n        <Row className={styles.but_ui}><button onClick= { () => dispatch(registerAsOrganization({ name: forgName , normalSubFee: fnormalSubFee , premiumSubFee: fpremiumSubFee, user:currentOrg}))}>Create Org</button></Row>\n        \n    </Container>\n\n    return(\n     content\n    )\n\n  }\n\n\n\n\n  else if (orgCreated && !isOwner){\n\n    return (\n       <Container className={styles.node}>\n\n          \n\n          <Row style={{display: 'flex',  justifyContent:'center', paddingBottom: 30, paddingLeft:170}}><Col className={styles.attribute}>LRN Balance:</Col> <Col className={styles.attr_value} style={{ paddingRight:180 }}>{userTokenBalance}</Col></Row>\n      \n          \n          <Row style={{display: 'flex',  justifyContent:'center'}}> <p> 1 LRN Token = 1 wei </p></Row>\n          <Row className={styles.but_ui} style={{display: 'flex', paddingBottom:50}}><Col><input type=\"text\" value={purchaseAmount} onChange={ handlePurchaseAmount}/></Col><Col><button onClick= { () => dispatch( purchaseTokens({value: purchaseAmount}) ) }>Purchase Tokens</button></Col></Row>\n          \n           <Row><Col className={styles.attribute}> Normal Secret:</Col> <Col className={styles.attr_small}><p>{normalText}</p></Col></Row>\n\n          <Row><Col className={styles.attribute}>Learn Token Balance:</Col> <Col className={styles.attr_value}>{userTokenBalance}</Col></Row>\n          <Row><Col className={styles.attribute}>Organization owner:</Col> <Col className={styles.attr_small}>{localStorage.getItem(\"owner\")}</Col></Row>\n          <Row><Col className={styles.attribute}>User :</Col> <Col className={styles.attr_small}>{currentOrg}</Col></Row>\n          <Row><Col className={styles.attribute}>Organization Name:</Col> <Col className={styles.attr_value}>{forgName}</Col></Row>\n          <Row><Col className={styles.attribute}>Normal Sub Fee:</Col> <Col className={styles.attr_value}>{normalSubFee}</Col></Row>\n          <Row><Col className={styles.attribute}>Premium Sub Fee:</Col> <Col className={styles.attr_value}>{premiumSubFee}</Col></Row>\n          <Row><Col className={styles.attribute}>Normal Time Access per Sub:</Col> <Col className={styles.attr_value}>{normalSubTime}</Col></Row>\n          <Row><Col className={styles.attribute}>Premium Time Access per Sub:</Col> <Col className={styles.attr_value}>{premiumSubTime}</Col></Row>\n\n          {/*<Row><Col className={styles.attribute}>my Normal End Time:</Col> <Col className={styles.attr_value}>{normalEndTime} </Col></Row>\n          <Row><Col className={styles.attribute}>my Premium End Time:</Col> <Col className={styles.attr_value}>{premiumEndTime}</Col></Row>*/}\n          <Row><Col className={styles.attribute}>Normal Access ?</Col> <Col className={styles.attr_value}>{doesUserHasNormalAccess}</Col></Row>\n          \n          {bContent}\n      </Container>\n\n    )\n  }\n\n\n  else if(orgCreated && isOwner){\n     return(\n       <Container className={styles.node}>\n         <Row style={{display: 'flex',  justifyContent:'center',alignItems: 'center', paddingTop:400}}><p> Org has been created. Switch account to purchase subscriptions</p></Row>\n       </Container>\n     )\n  }\n\n  else{\n\n    return(\n      <Container>\n      </Container>\n    )\n  }\n  \n\n\n}\n","/home/kesha/Desktop/phase_4_50360333_CSE526/Phase_4_source_code/src/features/web3.js",[],"/home/kesha/Desktop/phase_4_50360333_CSE526/Phase_4_source_code/src/features/controller.js",[],{"ruleId":"68","severity":1,"message":"69","line":2,"column":8,"nodeType":"70","messageId":"71","endLine":2,"endColumn":12},{"ruleId":"68","severity":1,"message":"72","line":1,"column":23,"nodeType":"70","messageId":"71","endLine":1,"endColumn":29},{"ruleId":"68","severity":1,"message":"73","line":5,"column":9,"nodeType":"70","messageId":"71","endLine":5,"endColumn":14},{"ruleId":"74","severity":1,"message":"75","line":29,"column":17,"nodeType":"76","messageId":"77","endLine":29,"endColumn":19},{"ruleId":"74","severity":1,"message":"75","line":36,"column":17,"nodeType":"76","messageId":"77","endLine":36,"endColumn":19},{"ruleId":"74","severity":1,"message":"75","line":81,"column":21,"nodeType":"76","messageId":"77","endLine":81,"endColumn":23},{"ruleId":"74","severity":1,"message":"75","line":96,"column":20,"nodeType":"76","messageId":"77","endLine":96,"endColumn":22},{"ruleId":"74","severity":1,"message":"78","line":269,"column":42,"nodeType":"76","messageId":"77","endLine":269,"endColumn":44},{"ruleId":"68","severity":1,"message":"79","line":3,"column":10,"nodeType":"70","messageId":"71","endLine":3,"endColumn":13},{"ruleId":"68","severity":1,"message":"80","line":6,"column":8,"nodeType":"70","messageId":"71","endLine":6,"endColumn":14},{"ruleId":"68","severity":1,"message":"73","line":7,"column":9,"nodeType":"70","messageId":"71","endLine":7,"endColumn":14},{"ruleId":"68","severity":1,"message":"81","line":18,"column":3,"nodeType":"70","messageId":"71","endLine":18,"endColumn":30},{"ruleId":"68","severity":1,"message":"82","line":36,"column":10,"nodeType":"70","messageId":"71","endLine":36,"endColumn":16},{"ruleId":"68","severity":1,"message":"83","line":36,"column":18,"nodeType":"70","messageId":"71","endLine":36,"endColumn":27},{"ruleId":"68","severity":1,"message":"84","line":48,"column":9,"nodeType":"70","messageId":"71","endLine":48,"endColumn":16},{"ruleId":"68","severity":1,"message":"85","line":62,"column":10,"nodeType":"70","messageId":"71","endLine":62,"endColumn":21},{"ruleId":"68","severity":1,"message":"86","line":62,"column":23,"nodeType":"70","messageId":"71","endLine":62,"endColumn":37},{"ruleId":"68","severity":1,"message":"87","line":71,"column":11,"nodeType":"70","messageId":"71","endLine":71,"endColumn":24},{"ruleId":"68","severity":1,"message":"88","line":71,"column":26,"nodeType":"70","messageId":"71","endLine":71,"endColumn":42},{"ruleId":"68","severity":1,"message":"89","line":72,"column":11,"nodeType":"70","messageId":"71","endLine":72,"endColumn":25},{"ruleId":"68","severity":1,"message":"90","line":72,"column":27,"nodeType":"70","messageId":"71","endLine":72,"endColumn":44},{"ruleId":"68","severity":1,"message":"91","line":79,"column":9,"nodeType":"70","messageId":"71","endLine":79,"endColumn":16},{"ruleId":"68","severity":1,"message":"92","line":87,"column":10,"nodeType":"70","messageId":"71","endLine":87,"endColumn":24},{"ruleId":"68","severity":1,"message":"93","line":87,"column":26,"nodeType":"70","messageId":"71","endLine":87,"endColumn":43},{"ruleId":"68","severity":1,"message":"94","line":88,"column":10,"nodeType":"70","messageId":"71","endLine":88,"endColumn":18},{"ruleId":"95","severity":1,"message":"96","line":109,"column":7,"nodeType":"97","endLine":109,"endColumn":9,"suggestions":"98"},{"ruleId":"74","severity":1,"message":"75","line":116,"column":32,"nodeType":"76","messageId":"77","endLine":116,"endColumn":34},{"ruleId":"74","severity":1,"message":"75","line":126,"column":33,"nodeType":"76","messageId":"77","endLine":126,"endColumn":35},{"ruleId":"68","severity":1,"message":"99","line":147,"column":17,"nodeType":"70","messageId":"71","endLine":147,"endColumn":25},{"ruleId":"95","severity":1,"message":"96","line":155,"column":6,"nodeType":"97","endLine":155,"endColumn":8,"suggestions":"100"},{"ruleId":"74","severity":1,"message":"78","line":187,"column":36,"nodeType":"76","messageId":"77","endLine":187,"endColumn":38},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'nanoid' is defined but never used.","'store' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","'Box' is defined but never used.","'Select' is defined but never used.","'purchasePremiumSubscription' is defined but never used.","'oowner' is assigned a value but never used.","'setOowner' is assigned a value but never used.","'orgName' is assigned a value but never used.","'userBalance' is assigned a value but never used.","'setUserBalance' is assigned a value but never used.","'normalEndTime' is assigned a value but never used.","'setNormalEndTime' is assigned a value but never used.","'premiumEndTime' is assigned a value but never used.","'setPremiumEndTime' is assigned a value but never used.","'options' is assigned a value but never used.","'selectedOption' is assigned a value but never used.","'setSelectedOption' is assigned a value but never used.","'premText' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["101"],"'accounts' is assigned a value but never used.",["102"],{"desc":"103","fix":"104"},{"desc":"103","fix":"105"},"Update the dependencies array to be: [dispatch]",{"range":"106","text":"107"},{"range":"108","text":"107"},[3499,3501],"[dispatch]",[4586,4588]]