{"ast":null,"code":"import { createSlice, nanoid, createAsyncThunk } from '@reduxjs/toolkit'; //import controller from '../controller'\n\nimport web3 from './../web3';\nimport { controller, tcontroller } from '../controller';\nexport const getCurrentOrg = createAsyncThunk('Org/getCurrentOrg', async () => {\n  const acts = await web3.eth.getAccounts();\n  return acts[0];\n});\nexport const registerAsOrganization = createAsyncThunk('Org/registerAsOrganizaton', async data => {\n  console.log(\"Daaa\", data);\n  await controller.methods.registerAsOrganization(data.name, parseInt(data.normalSubFee), parseInt(data.premiumSubFee)).send({\n    from: data.user\n  });\n  return {\n    premiumSubFee: data.premiumSubFee,\n    normalSubFee: data.normalSubFee,\n    name: data.name\n  };\n});\nexport const purchaseTokens = createAsyncThunk('Org/purchaseTokens', async () => {\n  let act = await web3.eth.getAccounts();\n  await controller.methods.purchaseTokens().send({\n    from: act[0],\n    value: 50\n  });\n  let balance = await tcontroller.methods.balanceOf(act[0]).call();\n  console.log(balance);\n  return {\n    balance: balance\n  };\n});\nexport const getTokenBalance = createAsyncThunk('Org/getTokenBalance', async () => {\n  let act = await web3.eth.getAccounts();\n  console.log(\"methods\", tcontroller.methods);\n  let balance = await tcontroller.methods.balanceOf(act[0]).call();\n  console.log(\"l balance is \", balance);\n  return {\n    balance: balance\n  };\n});\n/*\nexport const loadSelectElements = createAsyncThunk('node/loadSelectElements', async () => {\n  const response = await controller.methods.nodeCount().call();\n  const options = [];\n  for(var i=0;i < response;i++){\n      options.push({ value: i, label: i })\n  }\n  return options;\n})\n\nexport const getBalanceAsync = createAsyncThunk('node/getBalanceAsync', async (_nodeId) => {\n  const response = await controller.methods.getCumulativeNodeDeposit(_nodeId).call();\n  return response;\n})\n\nexport const updateCurrentNodeAsync = createAsyncThunk('node/updateCurrentNodeAsync', async (_nodeId) => {\n  return parseInt(_nodeId);\n})\n\n\nexport const stakeRenAsync = createAsyncThunk('node/stakeRenAsync', async (data) => {\n  //const {_amount,_nodeId,_sender}= data;\n  await controller.methods.stakeRen(parseInt(data.incrementAmount),parseInt(data.currentNode)).send({from:data.user});\n\n  \n  const nodeBalance = await controller.methods.getCumulativeNodeDeposit(data.currentNode).call();\n  let status\n  if(parseInt(nodeBalance) == 50000){\n    status = 'full';\n  }\n  else{\n    status = 'accepting';\n  }\n\n  \n\n  const share = await controller.methods.getMyCumulativeNodeDeposit(parseInt(data.currentNode)).call({from:data.user});\n\n  return {nodeId: data.currentNode, nodeBalance: nodeBalance, status: status, share:share}\n})\n\n\nexport const createNodeAsync = createAsyncThunk('node/createNodeAsync', async (_user) => {\n  const response = await controller.methods.createNode().send({from:_user});\n  return response;\n})\n\nexport const getNodeAsync = createAsyncThunk('node/getNodeAsync', async () => {\n  const response = await controller.methods.nodeCount().call();\n  return parseInt(response)-1;\n})\n\nexport const getDepositStatusAsync = createAsyncThunk('node/getDepositStatusAsync',async() => {\n  const currentNodeBalance = getBalanceAsync(getNodeAsync());\n  if(parseInt(currentNodeBalance) == 50000){\n    return 'full';\n  }\n  else{\n    return 'accepting';\n  }\n})\n\nexport const updateNodeStats = createAsyncThunk('node/updateNodeStats', async (data) => {\n  const response = await controller.methods.nodeCount().call();\n  \n  let nodeId \n  if(data._nodeId == -1){\n    nodeId= parseInt(response) - 1;\n  }\n  else{\n    nodeId = parseInt(data._nodeId)\n  }\n  const nodeBalance = await controller.methods.getCumulativeNodeDeposit(nodeId).call();\n  let status\n  if(parseInt(nodeBalance) == 50000){\n    status = 'full';\n  }\n  else{\n    status = 'accepting';\n  }\n\n  const acts = await web3.eth.getAccounts();\n  console.log(\"user is\", acts[0])\n\n\n  const share = await controller.methods.getMyCumulativeNodeDeposit(nodeId).call({from:acts[0]});\n\n  return {nodeId: nodeId, nodeBalance: nodeBalance, status: status,share:share}\n})\n\n\n\nexport const isOwner = createAsyncThunk('node/isOwner', async (_user) => {\n  const response = await controller.methods.owner().call();\n  const acts = await web3.eth.getAccounts(); \n\n  if(response == acts[0]){\n    return 'yes';\n  }\n  else{\n    return 'no';\n  }\n  \n})\n\n*/\n\nlet initialState = {\n  currentOrg: '',\n  orgCreated: false\n};\nconst OrgSlice = createSlice({\n  name: 'org',\n  orgName: '',\n  initialState,\n  normalSubFee: 0,\n  premiumSubFee: 0,\n  normalSubTime: 120,\n  premiumSubTime: 300,\n  userTokenBalance: 0,\n  reducers: {// omit existing reducers here\n  },\n  extraReducers: builder => {\n    // Add reducers for additional action types here, and handle loading state as needed\n    builder.addCase(getCurrentOrg.fulfilled, (state, action) => {\n      // Add user to the state array\n      state.status = 'succeeded';\n      state.currentOrg = action.payload;\n    }).addCase(registerAsOrganization.fulfilled, (state, action) => {\n      // Add user to the state array\n      state.orgName = action.payload.name;\n      state.normalSubFee = action.payload.normalSubFee;\n      state.premiumSubFee = action.payload.premiumSubFee;\n      state.orgCreated = true;\n      state.userTokenBalance = action.payload.balance;\n    }).addCase(getTokenBalance.fulfilled, (state, action) => {\n      // Add user to the state array\n      state.userTokenBalance = action.payload.balance;\n    }).addCase(purchaseTokens.fulfilled, (state, action) => {\n      // Add user to the state array\n      state.userTokenBalance = action.payload.balance;\n    });\n    /*\n    .addCase(getBalanceAsync.fulfilled, (state, action) => {\n      // Add user to the state array\n      state.status = 'succeeded'\n      state.balance = action.payload\n    })\n    .addCase(getNodeAsync.fulfilled, (state, action) => {\n      // Add user to the state array\n      state.status = 'succeeded'\n      state.currentNode = action.payload\n    })\n    .addCase(getDepositStatusAsync.fulfilled, (state, action) => {\n      // Add user to the state array\n      state.status = 'succeeded'\n      state.depositStatus = action.payload\n    })\n    .addCase(updateNodeStats.fulfilled, (state, action) => {\n      // Add user to the state array\n      state.depositStatus = action.payload.status\n      state.balance = action.payload.nodeBalance\n      state.currentNode = action.payload.nodeId\n      state.share = action.payload.share\n      state.status ='func'\n    })\n    .addCase(isOwner.fulfilled, (state, action) => {\n      // Add user to the state array\n      state.owner = action.payload\n    })\n    .addCase(loadSelectElements.fulfilled, (state, action) => {\n      // Add user to the state array\n      state.options = action.payload\n    })\n    .addCase(stakeRenAsync.fulfilled, (state, action) => {\n      // Add user to the state array\n      state.depositStatus = action.payload.status\n      state.balance = action.payload.nodeBalance\n      state.currentNode = action.payload.nodeId\n      state.share = action.payload.share\n      state.status ='func'\n    })\n    */\n  }\n});\nexport default OrgSlice.reducer;","map":{"version":3,"sources":["/home/kesha/Videos/Summer2021-main/REN_UI/src/features/OrgUpdater/OrgSlice.js"],"names":["createSlice","nanoid","createAsyncThunk","web3","controller","tcontroller","getCurrentOrg","acts","eth","getAccounts","registerAsOrganization","data","console","log","methods","name","parseInt","normalSubFee","premiumSubFee","send","from","user","purchaseTokens","act","value","balance","balanceOf","call","getTokenBalance","initialState","currentOrg","orgCreated","OrgSlice","orgName","normalSubTime","premiumSubTime","userTokenBalance","reducers","extraReducers","builder","addCase","fulfilled","state","action","status","payload","reducer"],"mappings":"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AK,CAACxB,aAAN,GAAsByB,MAAM,CAACE,OAAP,CAAe3B,aAArC;AACAwB,MAAAA,KAAK,CAACX,UAAN,GAAmB,IAAnB;AACAW,MAAAA,KAAK,CAACN,gBAAN,GAAyBO,MAAM,CAACE,OAAP,CAAepB,OAAxC;AACD,KAZD,EAaCe,OAbD,CAaSZ,eAAe,CAACa,SAbzB,EAaoC,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACrD;AACAD,MAAAA,KAAK,CAACN,gBAAN,GAAyBO,MAAM,CAACE,OAAP,CAAepB,OAAxC;AACD,KAhBD,EAiBCe,OAjBD,CAiBSlB,cAAc,CAACmB,SAjBxB,EAiBmC,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACpD;AACAD,MAAAA,KAAK,CAACN,gBAAN,GAAyBO,MAAM,CAACE,OAAP,CAAepB,OAAxC;AACD,KApBD;AAsBA;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEK;AA9EwB,CAAD,CAA5B;AAkFE,eAAeO,QAAQ,CAACc,OAAxB","sourcesContent":["import { createSlice, nanoid, createAsyncThunk } from '@reduxjs/toolkit'\n//import controller from '../controller'\nimport web3 from './../web3'\nimport {controller, tcontroller} from '../controller'\n\n\n\n\n\nexport const getCurrentOrg = createAsyncThunk('Org/getCurrentOrg', async () => {\n  const acts = await web3.eth.getAccounts(); \n  return acts[0];\n})\n\n\nexport const registerAsOrganization = createAsyncThunk('Org/registerAsOrganizaton', async (data) => {\n     console.log(\"Daaa\", data)\n     await controller.methods.registerAsOrganization(data.name,parseInt(data.normalSubFee), parseInt(data.premiumSubFee)).send({from:data.user});\n     \n     return {premiumSubFee: data.premiumSubFee, normalSubFee: data.normalSubFee, name: data.name}\n})\n\n\nexport const purchaseTokens = createAsyncThunk('Org/purchaseTokens', async () => {\n     let act = await web3.eth.getAccounts();\n     await controller.methods.purchaseTokens().send({from:act[0], value: 50});\n     let balance = await tcontroller.methods.balanceOf(act[0]).call();\n     console.log(balance);\n     return {balance:balance}\n})\n\nexport const getTokenBalance = createAsyncThunk('Org/getTokenBalance', async () => {\n     let act = await web3.eth.getAccounts();\n     console.log(\"methods\", tcontroller.methods)\n     let balance = await tcontroller.methods.balanceOf(act[0]).call();\n\n     console.log(\"l balance is \", balance)\n     return { balance : balance }\n})\n/*\nexport const loadSelectElements = createAsyncThunk('node/loadSelectElements', async () => {\n  const response = await controller.methods.nodeCount().call();\n  const options = [];\n  for(var i=0;i < response;i++){\n      options.push({ value: i, label: i })\n  }\n  return options;\n})\n\nexport const getBalanceAsync = createAsyncThunk('node/getBalanceAsync', async (_nodeId) => {\n  const response = await controller.methods.getCumulativeNodeDeposit(_nodeId).call();\n  return response;\n})\n\nexport const updateCurrentNodeAsync = createAsyncThunk('node/updateCurrentNodeAsync', async (_nodeId) => {\n  return parseInt(_nodeId);\n})\n\n\nexport const stakeRenAsync = createAsyncThunk('node/stakeRenAsync', async (data) => {\n  //const {_amount,_nodeId,_sender}= data;\n  await controller.methods.stakeRen(parseInt(data.incrementAmount),parseInt(data.currentNode)).send({from:data.user});\n\n  \n  const nodeBalance = await controller.methods.getCumulativeNodeDeposit(data.currentNode).call();\n  let status\n  if(parseInt(nodeBalance) == 50000){\n    status = 'full';\n  }\n  else{\n    status = 'accepting';\n  }\n\n  \n\n  const share = await controller.methods.getMyCumulativeNodeDeposit(parseInt(data.currentNode)).call({from:data.user});\n\n  return {nodeId: data.currentNode, nodeBalance: nodeBalance, status: status, share:share}\n})\n\n\nexport const createNodeAsync = createAsyncThunk('node/createNodeAsync', async (_user) => {\n  const response = await controller.methods.createNode().send({from:_user});\n  return response;\n})\n\nexport const getNodeAsync = createAsyncThunk('node/getNodeAsync', async () => {\n  const response = await controller.methods.nodeCount().call();\n  return parseInt(response)-1;\n})\n\nexport const getDepositStatusAsync = createAsyncThunk('node/getDepositStatusAsync',async() => {\n  const currentNodeBalance = getBalanceAsync(getNodeAsync());\n  if(parseInt(currentNodeBalance) == 50000){\n    return 'full';\n  }\n  else{\n    return 'accepting';\n  }\n})\n\nexport const updateNodeStats = createAsyncThunk('node/updateNodeStats', async (data) => {\n  const response = await controller.methods.nodeCount().call();\n  \n  let nodeId \n  if(data._nodeId == -1){\n    nodeId= parseInt(response) - 1;\n  }\n  else{\n    nodeId = parseInt(data._nodeId)\n  }\n  const nodeBalance = await controller.methods.getCumulativeNodeDeposit(nodeId).call();\n  let status\n  if(parseInt(nodeBalance) == 50000){\n    status = 'full';\n  }\n  else{\n    status = 'accepting';\n  }\n\n  const acts = await web3.eth.getAccounts();\n  console.log(\"user is\", acts[0])\n\n\n  const share = await controller.methods.getMyCumulativeNodeDeposit(nodeId).call({from:acts[0]});\n\n  return {nodeId: nodeId, nodeBalance: nodeBalance, status: status,share:share}\n})\n\n\n\nexport const isOwner = createAsyncThunk('node/isOwner', async (_user) => {\n  const response = await controller.methods.owner().call();\n  const acts = await web3.eth.getAccounts(); \n\n  if(response == acts[0]){\n    return 'yes';\n  }\n  else{\n    return 'no';\n  }\n  \n})\n\n*/\n\n\nlet initialState= {\n      currentOrg: '',\n      orgCreated: false,\n\n    }\nconst OrgSlice = createSlice({\n    name:'org',\n    orgName: '',\n    initialState,\n    normalSubFee:0,\n    premiumSubFee:0,\n    normalSubTime:120,\n    premiumSubTime:300,\n    userTokenBalance:0,\n    reducers: {\n      // omit existing reducers here\n    },\n    extraReducers: (builder) => {\n      // Add reducers for additional action types here, and handle loading state as needed\n      builder.addCase(getCurrentOrg.fulfilled, (state, action) => {\n        // Add user to the state array\n        state.status = 'succeeded'\n        state.currentOrg = action.payload\n      })\n      .addCase(registerAsOrganization.fulfilled, (state, action) => {\n        // Add user to the state array\n        state.orgName = action.payload.name\n        state.normalSubFee = action.payload.normalSubFee\n        state.premiumSubFee = action.payload.premiumSubFee\n        state.orgCreated = true\n        state.userTokenBalance = action.payload.balance\n      })\n      .addCase(getTokenBalance.fulfilled, (state, action) => {\n        // Add user to the state array\n        state.userTokenBalance = action.payload.balance\n      })\n      .addCase(purchaseTokens.fulfilled, (state, action) => {\n        // Add user to the state array\n        state.userTokenBalance = action.payload.balance\n      })\n\n      /*\n      .addCase(getBalanceAsync.fulfilled, (state, action) => {\n        // Add user to the state array\n        state.status = 'succeeded'\n        state.balance = action.payload\n      })\n      .addCase(getNodeAsync.fulfilled, (state, action) => {\n        // Add user to the state array\n        state.status = 'succeeded'\n        state.currentNode = action.payload\n      })\n      .addCase(getDepositStatusAsync.fulfilled, (state, action) => {\n        // Add user to the state array\n        state.status = 'succeeded'\n        state.depositStatus = action.payload\n      })\n      .addCase(updateNodeStats.fulfilled, (state, action) => {\n        // Add user to the state array\n        state.depositStatus = action.payload.status\n        state.balance = action.payload.nodeBalance\n        state.currentNode = action.payload.nodeId\n        state.share = action.payload.share\n        state.status ='func'\n      })\n      .addCase(isOwner.fulfilled, (state, action) => {\n        // Add user to the state array\n        state.owner = action.payload\n      })\n      .addCase(loadSelectElements.fulfilled, (state, action) => {\n        // Add user to the state array\n        state.options = action.payload\n      })\n      .addCase(stakeRenAsync.fulfilled, (state, action) => {\n        // Add user to the state array\n        state.depositStatus = action.payload.status\n        state.balance = action.payload.nodeBalance\n        state.currentNode = action.payload.nodeId\n        state.share = action.payload.share\n        state.status ='func'\n      })\n      */\n      \n    }\n})\n\n\n  export default OrgSlice.reducer"]},"metadata":{},"sourceType":"module"}